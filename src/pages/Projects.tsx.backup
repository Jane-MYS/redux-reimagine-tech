import React, { useState, useEffect } from 'react'
import { useAuth } from '@/contexts/AuthContext'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { ArrowLeft, Plus, Calendar, Clock, CheckCircle, AlertCircle, XCircle, Download, Upload, FileText, Image, Video, MessageSquare, Paperclip, X } from 'lucide-react'
import { Link } from 'react-router-dom'
import { ProtectedRoute } from '@/components/auth/ProtectedRoute'
import Navbar from '@/components/Navbar'
import Footer from '@/components/Footer'

const Projects: React.FC = () => {
  const { user } = useAuth()
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const [newProject, setNewProject] = useState({
    title: '',
    description: '',
    status: 'pending',
    startDate: '',
    endDate: ''
  })
  const [showValidationWarning, setShowValidationWarning] = useState(false)
  const [selectedProject, setSelectedProject] = useState<any>(null)
  const [isDetailsDialogOpen, setIsDetailsDialogOpen] = useState(false)
  const [newComment, setNewComment] = useState('')
  const [uploadedFiles, setUploadedFiles] = useState<any[]>([])
  const [isUploading, setIsUploading] = useState(false)
  const [showSaveSuccess, setShowSaveSuccess] = useState(false)
  const [projects, setProjects] = useState([
    {
      id: '1',
      title: 'Website Redesign',
      description: 'Complete redesign of company website with modern UI/UX',
      status: 'in_progress' as const,
      startDate: '2024-01-15',
      endDate: '2024-03-15',
      progress: 65,
      lastUpdated: '2024-01-22',
      summary: 'This project involves a complete redesign of the company website to improve user experience, increase conversion rates, and modernize the visual design. The new website will feature a responsive design, improved navigation, and enhanced performance.',
      files: [
        { id: '1', name: 'Homepage Mockup v2.pdf', type: 'pdf', size: '2.3 MB', url: '#', uploadedAt: '2024-01-20' },
        { id: '2', name: 'Wireframes.png', type: 'image', size: '1.8 MB', url: '#', uploadedAt: '2024-01-18' },
        { id: '3', name: 'Design System Guide.pdf', type: 'pdf', size: '4.1 MB', url: '#', uploadedAt: '2024-01-15' }
      ],
      comments: [
        { id: '1', author: 'Client', message: 'The new design looks great! Can we make the header slightly smaller?', timestamp: '2024-01-22 14:30' },
        { id: '2', author: 'Team', message: 'Header size adjusted. Please review the updated mockup.', timestamp: '2024-01-22 16:45' }
      ]
    },
    {
      id: '2',
      title: 'Mobile App Development',
      description: 'iOS and Android app for customer engagement',
      status: 'pending' as const,
      startDate: '2024-02-01',
      endDate: '2024-05-01',
      progress: 0,
      lastUpdated: '2024-01-20',
      summary: 'Development of a cross-platform mobile application for iOS and Android that will enhance customer engagement through features like push notifications, in-app messaging, and personalized content delivery.',
      files: [
        { id: '4', name: 'App Wireframes.pdf', type: 'pdf', size: '3.2 MB', url: '#', uploadedAt: '2024-01-18' },
        { id: '5', name: 'User Flow Diagram.png', type: 'image', size: '1.5 MB', url: '#', uploadedAt: '2024-01-16' }
      ],
      comments: [
        { id: '3', author: 'Client', message: 'Looking forward to seeing the first prototype!', timestamp: '2024-01-20 10:15' }
      ]
    },
    {
      id: '3',
      title: 'Database Migration',
      description: 'Migrate legacy database to cloud infrastructure',
      status: 'completed' as const,
      startDate: '2023-12-01',
      endDate: '2024-01-10',
      progress: 100,
      lastUpdated: '2024-01-10',
      summary: 'Successfully migrated the legacy database system to a modern cloud infrastructure, improving performance, scalability, and reliability. The migration included data validation, backup procedures, and zero-downtime deployment.',
      files: [
        { id: '6', name: 'Migration Report.pdf', type: 'pdf', size: '5.7 MB', url: '#', uploadedAt: '2024-01-10' },
        { id: '7', name: 'Performance Metrics.xlsx', type: 'excel', size: '892 KB', url: '#', uploadedAt: '2024-01-09' }
      ],
      comments: [
        { id: '4', author: 'Team', message: 'Migration completed successfully! All systems are running smoothly.', timestamp: '2024-01-10 17:30' },
        { id: '5', author: 'Client', message: 'Excellent work! The performance improvement is noticeable.', timestamp: '2024-01-11 09:20' }
      ]
    }
  ])

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="w-4 h-4 text-green-600" />
      case 'in_progress':
        return <Clock className="w-4 h-4 text-blue-600" />
      case 'pending':
        return <AlertCircle className="w-4 h-4 text-yellow-600" />
      default:
        return <XCircle className="w-4 h-4 text-gray-600" />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed':
        return 'bg-green-100 text-green-800 border-green-200'
      case 'in_progress':
        return 'bg-blue-100 text-blue-800 border-blue-200'
      case 'pending':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    })
  }

  const handleCreateProject = () => {
    if (newProject.title && newProject.description && newProject.startDate && newProject.endDate) {
      const project = {
        id: (projects.length + 1).toString(),
        title: newProject.title,
        description: newProject.description,
        status: newProject.status as 'pending' | 'in_progress' | 'completed',
        startDate: newProject.startDate,
        endDate: newProject.endDate,
        progress: newProject.status === 'completed' ? 100 : newProject.status === 'in_progress' ? 50 : 0,
        lastUpdated: new Date().toISOString().split('T')[0]
      }
      setProjects([project, ...projects])
      setNewProject({ title: '', description: '', status: 'pending', startDate: '', endDate: '' })
      setShowValidationWarning(false)
      setIsCreateDialogOpen(false)
    } else {
      setShowValidationWarning(true)
    }
  }

  const handleInputChange = (field: string, value: string) => {
    setNewProject({ ...newProject, [field]: value })
    if (showValidationWarning) {
      setShowValidationWarning(false)
    }
  }

  const handleViewDetails = (project: any) => {
    setSelectedProject(project)
    setIsDetailsDialogOpen(true)
  }

  // Email notification functions
  const sendCommentNotification = async (projectTitle: string, message: string, projectId: string) => {
    try {
      const emailData = {
        to: 'your-email@company.com', // Replace with your email
        subject: `New Comment: ${projectTitle}`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px;">
              New Comment from Client
            </h2>
            
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #333; margin-top: 0;">Project Details</h3>
              <p><strong>Project:</strong> ${projectTitle}</p>
              <p><strong>Project ID:</strong> ${projectId}</p>
              <p><strong>Time:</strong> ${new Date().toLocaleString()}</p>
            </div>
            
            <div style="background: #e3f2fd; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #1976d2; margin-top: 0;">Client Message</h3>
              <p style="font-size: 16px; line-height: 1.6; color: #333;">
                "${message}"
              </p>
            </div>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="https://your-admin-panel.com/projects/${projectId}" 
                 style="background: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
                View Project in Admin Panel
              </a>
            </div>
          </div>
        `
      }
      
      // For now, we'll log the email data
      // In production, you'd send this via your email service
      console.log('ðŸ“§ Comment Notification Email:', emailData)
      
      // Simulate email sending
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      return { success: true, message: 'Comment notification sent' }
    } catch (error) {
      console.error('Failed to send comment notification:', error)
      return { success: false, message: 'Failed to send notification' }
    }
  }

  const sendFileUploadNotification = async (projectTitle: string, fileName: string, fileSize: string, fileType: string, projectId: string) => {
    try {
      const emailData = {
        to: 'your-email@company.com', // Replace with your email
        subject: `New File Upload: ${projectTitle}`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #333; border-bottom: 2px solid #28a745; padding-bottom: 10px;">
              New File Upload from Client
            </h2>
            
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #333; margin-top: 0;">Project Details</h3>
              <p><strong>Project:</strong> ${projectTitle}</p>
              <p><strong>Project ID:</strong> ${projectId}</p>
              <p><strong>Upload Time:</strong> ${new Date().toLocaleString()}</p>
            </div>
            
            <div style="background: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #28a745; margin-top: 0;">Uploaded File</h3>
              <p><strong>File Name:</strong> ${fileName}</p>
              <p><strong>File Type:</strong> ${fileType}</p>
              <p><strong>File Size:</strong> ${fileSize}</p>
            </div>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="https://your-admin-panel.com/projects/${projectId}" 
                 style="background: #28a745; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
                View Project & Download File
              </a>
            </div>
          </div>
        `
      }
      
      console.log('ðŸ“§ File Upload Notification Email:', emailData)
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      return { success: true, message: 'File upload notification sent' }
    } catch (error) {
      console.error('Failed to send file upload notification:', error)
      return { success: false, message: 'Failed to send notification' }
    }
  }

  const handleAddComment = async () => {
    console.log('Add comment clicked', { newComment, selectedProject })
    if (newComment.trim() && selectedProject) {
      const comment = {
        id: Date.now().toString(),
        author: 'Client',
        message: newComment.trim(),
        timestamp: new Date().toLocaleString()
      }
      
      const updatedProject = {
        ...selectedProject,
        comments: [...(selectedProject.comments || []), comment]
      }
      
      setSelectedProject(updatedProject)
      setProjects(projects.map(p => p.id === selectedProject.id ? updatedProject : p))
      setNewComment('')
      
      // Send email notification for new comment
      try {
        await sendCommentNotification(selectedProject.title, newComment.trim(), selectedProject.id)
        console.log('Comment notification sent successfully')
      } catch (error) {
        console.error('Failed to send comment notification:', error)
      }
    }
  }

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files
    if (!files) return

    setIsUploading(true)
    
    // Simulate file upload (replace with actual Supabase Storage upload)
    for (let i = 0; i < files.length; i++) {
      const file = files[i]
      const uploadedFile = {
        id: Date.now().toString() + i,
        name: file.name,
        type: file.type.split('/')[0],
        size: (file.size / 1024 / 1024).toFixed(1) + ' MB',
        url: '#',
        uploadedAt: new Date().toISOString().split('T')[0]
      }
      
      setUploadedFiles(prev => [...prev, uploadedFile])
      
      // Send email notification for file upload
      try {
        await sendFileUploadNotification(
          selectedProject?.title || 'Unknown Project',
          file.name,
          uploadedFile.size,
          uploadedFile.type,
          selectedProject?.id || 'unknown'
        )
        console.log('File upload notification sent successfully')
      } catch (error) {
        console.error('Failed to send file upload notification:', error)
      }
      
      // Here you would upload to Supabase Storage
      // const { data, error } = await supabase.storage
      //   .from('project-files')
      //   .upload(`${selectedProject.id}/${file.name}`, file)
    }
    
    setIsUploading(false)
  }

  const getFileIcon = (type: string) => {
    switch (type) {
      case 'pdf':
        return <FileText className="w-4 h-4 text-red-600" />
      case 'image':
        return <Image className="w-4 h-4 text-blue-600" />
      case 'video':
        return <Video className="w-4 h-4 text-purple-600" />
      default:
        return <Paperclip className="w-4 h-4 text-gray-600" />
    }
  }

  const handleSave = () => {
    // Here you would save all changes to the database
    // For now, we'll just show a success message
    setShowSaveSuccess(true)
    setTimeout(() => {
      setShowSaveSuccess(false)
    }, 3000)
  }

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-white flex flex-col">
        <Navbar />
        
        <div className="container mx-auto px-6 pt-24 pb-8 flex-1">
          {/* Header */}
          <div className="flex items-center justify-between mb-8">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Active Projects</h1>
              <p className="text-gray-600 mt-2">Track and manage your ongoing projects</p>
            </div>
            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
              <DialogTrigger asChild>
                <Button className="bg-white border-gray-300 text-black hover:bg-primary hover:text-primary-foreground hover:border-primary">
                  <Plus className="w-4 h-4 mr-2" />
                  New Project
                </Button>
              </DialogTrigger>
              <DialogContent className="bg-white border-gray-200 max-w-2xl">
                <DialogHeader>
                  <DialogTitle className="text-gray-900">Create New Project</DialogTitle>
                  <DialogDescription className="text-gray-600">
                    Add a new project to track and manage your work progress.
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-6">
                  {showValidationWarning && (
                    <div className="bg-red-50 border border-red-200 rounded-md p-4">
                      <div className="flex items-center">
                        <AlertCircle className="w-5 h-5 text-red-600 mr-2" />
                        <p className="text-red-800 text-sm">
                          Please fill in all required fields (Title, Description, Start Date, and End Date) to create the project.
                        </p>
                      </div>
                    </div>
                  )}
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="title" className="text-gray-700">Project Title</Label>
                      <Input
                        id="title"
                        value={newProject.title}
                        onChange={(e) => handleInputChange('title', e.target.value)}
                        placeholder="Enter project title"
                        className="bg-white border-gray-300 text-gray-900"
                      />
                    </div>
                    <div>
                      <Label htmlFor="status" className="text-gray-700">Status</Label>
                      <Select value={newProject.status} onValueChange={(value) => handleInputChange('status', value)}>
                        <SelectTrigger className="bg-white border-gray-300">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="pending">Pending</SelectItem>
                          <SelectItem value="in_progress">In Progress</SelectItem>
                          <SelectItem value="completed">Completed</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                  
                  <div>
                    <Label htmlFor="description" className="text-gray-700">Description</Label>
                    <Textarea
                      id="description"
                      value={newProject.description}
                      onChange={(e) => handleInputChange('description', e.target.value)}
                      placeholder="Describe the project details and objectives"
                      className="bg-white border-gray-300 text-gray-900"
                      rows={4}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="startDate" className="text-gray-700">Start Date</Label>
                      <Input
                        id="startDate"
                        type="date"
                        value={newProject.startDate}
                        onChange={(e) => handleInputChange('startDate', e.target.value)}
                        className="bg-white border-gray-300 text-gray-900"
                      />
                    </div>
                    <div>
                      <Label htmlFor="endDate" className="text-gray-700">End Date</Label>
                      <Input
                        id="endDate"
                        type="date"
                        value={newProject.endDate}
                        onChange={(e) => handleInputChange('endDate', e.target.value)}
                        className="bg-white border-gray-300 text-gray-900"
                      />
                    </div>
                  </div>

                  <div className="flex justify-end space-x-3">
                    <Button
                      variant="outline"
                      onClick={() => setIsCreateDialogOpen(false)}
                      className="border-gray-300 text-black bg-white hover:bg-white hover:text-black"
                    >
                      Cancel
                    </Button>
                    <Button
                      onClick={handleCreateProject}
                      className="bg-primary text-primary-foreground hover:bg-primary/90"
                    >
                      Create Project
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>

          {/* Projects Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {projects.map((project) => (
              <Card key={project.id} className="bg-white border-gray-200 shadow-sm hover:shadow-md transition-shadow">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-gray-900">{project.title}</CardTitle>
                    <Badge className={`${getStatusColor(project.status)} border`}>
                      <div className="flex items-center space-x-1">
                        {getStatusIcon(project.status)}
                        <span className="capitalize">{project.status.replace('_', ' ')}</span>
                      </div>
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">

                    {/* Dates */}
                    <div className="space-y-2">
                      <div className="flex items-center space-x-2 text-sm text-gray-600">
                        <Calendar className="w-4 h-4" />
                        <span>Start: {formatDate(project.startDate)}</span>
                      </div>
                      <div className="flex items-center space-x-2 text-sm text-gray-600">
                        <Calendar className="w-4 h-4" />
                        <span>End: {formatDate(project.endDate)}</span>
                      </div>
                      <div className="flex items-center space-x-2 text-sm text-gray-500">
                        <Clock className="w-4 h-4" />
                        <span>Updated: {formatDate(project.lastUpdated)}</span>
                      </div>
                    </div>

                    {/* Action Button */}
                    <Button 
                      variant="outline" 
                      onClick={() => handleViewDetails(project)}
                      className="w-full border-gray-300 text-black bg-white hover:bg-primary hover:text-primary-foreground hover:border-primary"
                    >
                      View Details
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Empty State */}
          {projects.length === 0 && (
            <div className="text-center py-12">
              <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Plus className="w-12 h-12 text-gray-400" />
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">No projects yet</h3>
              <p className="text-gray-500 mb-4">Get started by creating your first project</p>
              <Button className="bg-white border-gray-300 text-black hover:bg-primary hover:text-primary-foreground hover:border-primary">
                <Plus className="w-4 h-4 mr-2" />
                Create Project
              </Button>
            </div>
          )}
        </div>

        <Footer />

        {/* Project Details Modal */}
        <Dialog open={isDetailsDialogOpen} onOpenChange={setIsDetailsDialogOpen}>
          <DialogContent className="bg-white border-gray-200 max-w-4xl max-h-[90vh] overflow-y-auto">
            <DialogHeader className="relative">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsDetailsDialogOpen(false)}
                className="absolute right-0 top-0 p-2 hover:bg-gray-100"
              >
                <X className="w-5 h-5 text-gray-600" />
              </Button>
              <DialogTitle className="text-gray-900 text-2xl pr-12">
                {selectedProject?.title}
              </DialogTitle>
              <DialogDescription className="text-gray-600">
                Project details, files, and communication
              </DialogDescription>
            </DialogHeader>

            {selectedProject && (
              <div className="space-y-6">
                {/* Project Summary */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Project Summary</h3>
                  <div className="bg-gray-50 rounded-lg p-4">
                    <p className="text-gray-700 leading-relaxed">{selectedProject.summary}</p>
                  </div>
                </div>

                {/* Upload Section */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Upload Files</h3>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                    <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-600 mb-4">Drag & drop files here, or click to browse</p>
                    <input
                      type="file"
                      multiple
                      onChange={handleFileUpload}
                      className="hidden"
                      id="file-upload"
                      accept=".pdf,.doc,.docx,.png,.jpg,.jpeg,.gif,.mp4,.mov,.avi"
                    />
                    <Button
                      variant="outline"
                      onClick={() => document.getElementById('file-upload')?.click()}
                      disabled={isUploading}
                      className="border-gray-300 text-black bg-white hover:bg-primary hover:text-primary-foreground hover:border-primary"
                    >
                      {isUploading ? 'Uploading...' : 'Choose Files'}
                    </Button>
                    <p className="text-xs text-gray-500 mt-2">
                      Supports: PDF, DOC, Images, Videos (Max 10MB each)
                    </p>
                  </div>
                  
                  {/* Uploaded Files Confirmation */}
                  {uploadedFiles.length > 0 && (
                    <div className="mt-4">
                      <h4 className="text-md font-medium text-gray-900 mb-3">Successfully Uploaded Files</h4>
                      <div className="space-y-2">
                        {uploadedFiles.map((file: any) => (
                          <div key={file.id} className="flex items-center justify-between p-3 bg-green-50 rounded-lg border border-green-200">
                            <div className="flex items-center space-x-3">
                              {getFileIcon(file.type)}
                              <div>
                                <p className="font-medium text-gray-900">{file.name}</p>
                                <p className="text-sm text-gray-500">{file.size} â€¢ {formatDate(file.uploadedAt)}</p>
                              </div>
                            </div>
                            <div className="flex items-center">
                              <span className="text-green-600 text-sm font-medium">âœ“ Uploaded</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                {/* Notes/Comments */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Notes & Comments</h3>
                  
                  {/* Comments List */}
                  <div className="space-y-4 mb-4">
                    {selectedProject.comments?.map((comment: any) => (
                      <div key={comment.id} className="flex space-x-3">
                        <div className="w-8 h-8 bg-primary rounded-full flex items-center justify-center">
                          <MessageSquare className="w-4 h-4 text-white" />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-1">
                            <span className="font-medium text-gray-900">{comment.author}</span>
                            <span className="text-sm text-gray-500">{comment.timestamp}</span>
                          </div>
                          <p className="text-gray-700 bg-gray-50 rounded-lg p-3">{comment.message}</p>
                        </div>
                      </div>
                    ))}
                  </div>

                  {/* Add Comment */}
                  <div className="space-y-3">
                    <Textarea
                      value={newComment}
                      onChange={(e) => setNewComment(e.target.value)}
                      placeholder="Add a comment or feedback..."
                      className="bg-white border-gray-300 text-gray-900"
                      rows={3}
                    />
                    <div className="flex justify-end">
                      <Button
                        onClick={handleAddComment}
                        disabled={!newComment.trim()}
                        className={`text-black ${
                          !newComment.trim() 
                            ? 'bg-gray-100 text-gray-400 cursor-not-allowed border-gray-300' 
                            : 'bg-white border-black hover:bg-primary hover:text-primary-foreground hover:border-primary'
                        }`}
                      >
                        Add Comment
                      </Button>
                    </div>
                  </div>
                </div>

                {/* Save Button and Success Message */}
                <div className="border-t border-gray-200 pt-6">
                  {showSaveSuccess && (
                    <div className="mb-4 bg-green-50 border border-green-200 rounded-lg p-4">
                      <div className="flex items-center">
                        <CheckCircle className="w-5 h-5 text-green-600 mr-2" />
                        <p className="text-green-800 font-medium">Changes saved successfully!</p>
                      </div>
                    </div>
                  )}
                  <div className="flex justify-end">
                    <Button
                      onClick={handleSave}
                      className="bg-white border border-black text-black hover:bg-primary hover:text-primary-foreground hover:border-primary"
                    >
                      Save
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </DialogContent>
        </Dialog>
      </div>
    </ProtectedRoute>
  )
}

export default Projects
